import time
import pygame
from OpenGL.GL import *
from OpenGL.GLU import *


class CubeSolver:
    def __init__(self, cube_instance):
        self.cube = cube_instance
        self.solution_sequence = []
        self.move_history = []
        self.showing_solution = False

        # Ensure face colors are stored as tuples for hashability
        self.color_mapping = {tuple(color): label for color, label in
                              zip(self.cube.colors, ['Y', 'W', 'B', 'G', 'R', 'O'])}

        self.move_names = {
            ('x', 1, 1): "R", ('x', 1, -1): "R'",
            ('x', -1, 1): "L'", ('x', -1, -1): "L",
            ('y', 1, 1): "U", ('y', 1, -1): "U'",
            ('y', -1, 1): "D'", ('y', -1, -1): "D",
            ('z', 1, 1): "F", ('z', 1, -1): "F'",
            ('z', -1, 1): "B'", ('z', -1, -1): "B",
        }

        # Predefined move sequences for solving steps
        self.algorithms = {
            'cross_edge': [('y', 1, 1), ('x', 1, 1), ('z', 1, 1), ('x', 1, -1), ('z', 1, -1), ('y', 1, -1)],
            'corner_insert': [('y', 1, 1), ('x', 1, 1), ('y', 1, -1), ('x', 1, -1)],
            'edge_flip': [('y', 1, 1), ('x', 1, 1), ('z', 1, 1), ('x', 1, -1), ('z', 1, -1), ('y', 1, -1)],
            'corner_orient': [('x', 1, 1), ('y', 1, 1), ('x', 1, -1), ('y', 1, 1)],
            'edge_permute': [('x', 1, 1), ('x', 1, 1), ('y', 1, 1), ('x', 1, -1), ('x', 1, -1), ('y', 1, -1)]
        }

    def is_solved(self):
        """Check if the cube is solved: each face should be of a uniform color."""
        face_colors = {face_dir: set() for face_dir in
                       [(0, 1, 0), (0, -1, 0), (0, 0, 1), (0, 0, -1), (1, 0, 0), (-1, 0, 0)]}

        for cube_data in self.cube.cube_states.values():
            for face_dir, color in cube_data['faces'].items():
                face_colors.setdefault(face_dir, set()).add(tuple(color))

        return all(len(colors) == 1 for colors in face_colors.values())

    def apply_move(self, move, animate=True):
        """Apply a move to the cube with optional animation."""
        axis, layer, direction = move
        if animate:
            self.cube.start_rotation(axis, layer, direction)
            while self.cube.animating:
                self.cube.update_animation()
                glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
                self.cube.draw_cube()
                pygame.display.flip()
                pygame.time.wait(16)

                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        pygame.quit()
                        return
        else:
            self.cube.finish_rotation(axis, layer, direction)

        self.move_history.append(move)

    def apply_algorithm(self, algorithm_name):
        """Apply a predefined move sequence."""
        if algorithm_name in self.algorithms:
            for move in self.algorithms[algorithm_name]:
                self.apply_move(move, animate=False)

    def solve(self):
        """Solve the cube using a layer-by-layer method."""
        if self.is_solved():
            print("Cube is already solved!")
            return

        print("Solving cube...")
        self.showing_solution = True
        self.move_history = []

        self._solve_white_cross()
        self._solve_white_corners()
        self._solve_middle_layer()
        self._solve_yellow_cross()
        self._orient_yellow_corners()
        self._permute_yellow_corners()
        self._permute_yellow_edges()

        print(f"Cube solved in {len(self.move_history)} moves!")
        self.showing_solution = False

    def _solve_white_cross(self):
        """Solve the white cross."""
        print("Solving white cross...")
        self.apply_algorithm('cross_edge')

    def _solve_white_corners(self):
        """Solve the white corners."""
        print("Solving white corners...")
        for _ in range(4):
            self.apply_algorithm('corner_insert')

    def _solve_middle_layer(self):
        """Solve the middle layer edges."""
        print("Solving middle layer...")
        for _ in range(4):
            self.apply_algorithm('edge_flip')

    def _solve_yellow_cross(self):
        """Make a yellow cross on the top face."""
        print("Creating yellow cross...")
        self.apply_move(('z', 1, 1))
        self.apply_move(('x', 1, 1))
        self.apply_move(('y', 1, 1))
        self.apply_move(('x', 1, -1))
        self.apply_move(('y', 1, -1))
        self.apply_move(('z', 1, -1))

    def _orient_yellow_corners(self):
        """Orient the yellow corners correctly."""
        print("Orienting yellow corners...")
        for _ in range(2):
            self.apply_algorithm('corner_orient')

    def _permute_yellow_corners(self):
        """Permute the yellow corners to their correct positions."""
        print("Permuting yellow corners...")
        self.apply_move(('x', 1, 1))
        self.apply_move(('y', 1, 1))
        self.apply_move(('x', 1, -1))

    def _permute_yellow_edges(self):
        """Permute the yellow edges to their correct positions."""
        print("Permuting yellow edges...")
        self.apply_algorithm('edge_permute')

    def get_move_notation(self):
        """Return the sequence of moves performed in notation format."""
        return " ".join(self.move_names.get(move, str(move)) for move in self.move_history)
