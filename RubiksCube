import pygame
from pygame.locals import *
from OpenGL.GL import *
from OpenGL.GLU import *
import math
import numpy as np


class RubiksCube3D:
    def __init__(self):
        self.window_width = 800
        self.window_height = 600
        self.angle_x = 0
        self.angle_y = 0
        self.dragging = False
        self.mouse_down_hit = None
        self.mouse_drag_start = None
        self.last_mouse_pos = None
        self.start_drag_pos = None
        self.drag_on_face = False

        # Threshold for dragging distance to initiate rotation
        self.drag_threshold = 5

        self.animating = False
        self.animation_params = None

        # Define face names for reference
        self.face_names = {
            (0, 1, 0): 'U',  # Up (Yellow)
            (0, -1, 0): 'D',  # Down (White)
            (0, 0, 1): 'F',  # Front (Blue)
            (0, 0, -1): 'B',  # Back (Green)
            (1, 0, 0): 'R',  # Right (Red)
            (-1, 0, 0): 'L',  # Left (Orange)
        }

        self.colors = [
            (1, 1, 0),  # Yellow
            (1, 1, 1),  # White
            (0, 0.5, 1),  # Blue
            (0, 1, 0),  # Green
            (1, 0, 0),  # Red
            (1, 0.5, 0)  # Orange
        ]

        self.cube_states = {}
        for x in range(-1, 2):
            for y in range(-1, 2):
                for z in range(-1, 2):
                    self.cube_states[(x, y, z)] = {
                        'pos': [x, y, z],
                        'faces': {
                            (0, 1, 0): self.colors[0],
                            (0, -1, 0): self.colors[1],
                            (0, 0, 1): self.colors[2],
                            (0, 0, -1): self.colors[3],
                            (1, 0, 0): self.colors[4],
                            (-1, 0, 0): self.colors[5]
                        }
                    }

        pygame.init()
        pygame.display.set_mode((self.window_width, self.window_height), DOUBLEBUF | OPENGL)
        glEnable(GL_DEPTH_TEST)
        glMatrixMode(GL_PROJECTION)
        gluPerspective(45, (self.window_width / self.window_height), 0.1, 50.0)
        glMatrixMode(GL_MODELVIEW)
        glTranslatef(0.0, 0.0, -5)

        # Store the current front face
        self.current_front_face = (0, 0, 1)  # Default front face is Z+

    def draw_small_cube(self, cube):
        pos = cube['pos']
        faces = cube['faces']
        x, y, z = pos
        glPushMatrix()
        glTranslatef(x * 0.62, y * 0.62, z * 0.62)
        glBegin(GL_QUADS)
        for normal, color in faces.items():
            glColor3fv(color)
            glNormal3fv(normal)
            for vertex in self.get_face_vertices(normal):
                glVertex3fv(vertex)
        glEnd()
        glPopMatrix()

    def get_face_vertices(self, normal):
        half = 0.3
        if normal == (0, 1, 0):
            return [(half, half, half), (-half, half, half), (-half, half, -half), (half, half, -half)]
        if normal == (0, -1, 0):
            return [(half, -half, half), (half, -half, -half), (-half, -half, -half), (-half, -half, half)]
        if normal == (0, 0, 1):
            return [(half, -half, half), (-half, -half, half), (-half, half, half), (half, half, half)]
        if normal == (0, 0, -1):
            return [(half, half, -half), (-half, half, -half), (-half, -half, -half), (half, -half, -half)]
        if normal == (1, 0, 0):
            return [(half, -half, -half), (half, -half, half), (half, half, half), (half, half, -half)]
        if normal == (-1, 0, 0):
            return [(-half, -half, half), (-half, -half, -half), (-half, half, -half), (-half, half, half)]
        return []

    def draw_cube(self):
        glPushMatrix()
        glRotatef(self.angle_x, 1, 0, 0)
        glRotatef(-self.angle_y, 0, 1, 0)

        # After rotation, determine which face is now facing the user
        self.update_current_front_face()

        for cube in self.cube_states.values():
            x, y, z = cube['pos']
            if self.animating:
                axis, index, direction, angle = self.animation_params
                if (axis == 'x' and x == index) or (axis == 'y' and y == index) or (axis == 'z' and z == index):
                    glPushMatrix()
                    glTranslatef(x * 0.62, y * 0.62, z * 0.62)
                    if axis == 'x':
                        glRotatef(angle, 1, 0, 0)
                    elif axis == 'y':
                        glRotatef(angle, 0, 1, 0)
                    elif axis == 'z':
                        glRotatef(angle, 0, 0, 1)
                    glTranslatef(-x * 0.62, -y * 0.62, -z * 0.62)
                    self.draw_small_cube(cube)
                    glPopMatrix()
                    continue
            self.draw_small_cube(cube)
        glPopMatrix()

    def update_current_front_face(self):
        """Use ray tracing to determine which face is currently facing the user"""
        # Create rotation matrix for current orientation
        rotation_matrix = np.identity(4)

        # Apply rotations
        rot_x = np.radians(self.angle_x)
        rot_y = np.radians(-self.angle_y)

        # Rotation around X
        rx_matrix = np.array([
            [1, 0, 0, 0],
            [0, np.cos(rot_x), -np.sin(rot_x), 0],
            [0, np.sin(rot_x), np.cos(rot_x), 0],
            [0, 0, 0, 1]
        ])

        # Rotation around Y
        ry_matrix = np.array([
            [np.cos(rot_y), 0, np.sin(rot_y), 0],
            [0, 1, 0, 0],
            [-np.sin(rot_y), 0, np.cos(rot_y), 0],
            [0, 0, 0, 1]
        ])

        # Combine rotations
        rotation_matrix = np.matmul(rotation_matrix, rx_matrix)
        rotation_matrix = np.matmul(rotation_matrix, ry_matrix)

        # The six possible face normals
        face_normals = [
            (0, 0, 1),  # Front (Z+)
            (0, 0, -1),  # Back (Z-)
            (1, 0, 0),  # Right (X+)
            (-1, 0, 0),  # Left (X-)
            (0, 1, 0),  # Up (Y+)
            (0, -1, 0)  # Down (Y-)
        ]

        # Camera position (viewer) is at (0, 0, -5) in view space
        camera_dir = np.array([0, 0, 1, 0])  # Looking along positive Z

        # Transform each normal by the rotation matrix and find the one most aligned with camera
        best_dot = -float('inf')
        best_normal = None

        for normal in face_normals:
            # Convert normal to homogeneous coordinates
            normal_vec = np.array([normal[0], normal[1], normal[2], 0])

            # Transform normal by rotation matrix
            transformed = np.matmul(rotation_matrix, normal_vec)
            transformed = transformed[:3]  # Remove homogeneous component

            # Normalize the transformed vector
            transformed_norm = np.linalg.norm(transformed)
            if transformed_norm > 0:
                transformed = transformed / transformed_norm

            # Calculate dot product with camera direction
            dot_product = np.dot(transformed, camera_dir[:3])

            # Update best match if this one is better
            if dot_product > best_dot:
                best_dot = dot_product
                best_normal = normal

        # Update the current front face
        if best_normal:
            self.current_front_face = best_normal
            # Debug print
            # print(f"Current front face: {self.face_names.get(best_normal, 'Unknown')}")

    def pick_face(self, mouse_x, mouse_y):
        """Enhanced ray trace from mouse position to determine which face was clicked"""
        # Convert mouse coordinates to normalized device coordinates
        x = (2.0 * mouse_x) / self.window_width - 1.0
        y = 1.0 - (2.0 * mouse_y) / self.window_height

        # Get the projection and modelview matrices
        projection_matrix = glGetDoublev(GL_PROJECTION_MATRIX)
        modelview_matrix = glGetDoublev(GL_MODELVIEW_MATRIX)

        # Apply current cube rotation to modelview
        rotation_matrix = np.identity(4)
        rot_x = np.radians(self.angle_x)
        rot_y = np.radians(-self.angle_y)

        # Rotation around X
        rx_matrix = np.array([
            [1, 0, 0, 0],
            [0, np.cos(rot_x), -np.sin(rot_x), 0],
            [0, np.sin(rot_x), np.cos(rot_x), 0],
            [0, 0, 0, 1]
        ])

        # Rotation around Y
        ry_matrix = np.array([
            [np.cos(rot_y), 0, np.sin(rot_y), 0],
            [0, 1, 0, 0],
            [-np.sin(rot_y), 0, np.cos(rot_y), 0],
            [0, 0, 0, 1]
        ])

        # Apply rotations
        temp_modelview = np.array(modelview_matrix)
        rotation_matrix = np.matmul(rotation_matrix, rx_matrix)
        rotation_matrix = np.matmul(rotation_matrix, ry_matrix)

        # Get viewport
        viewport = glGetIntegerv(GL_VIEWPORT)

        # Unproject the point
        near_point = gluUnProject(mouse_x, self.window_height - mouse_y, 0.0,
                                  modelview_matrix, projection_matrix, viewport)
        far_point = gluUnProject(mouse_x, self.window_height - mouse_y, 1.0,
                                 modelview_matrix, projection_matrix, viewport)

        # Calculate ray direction
        ray_dir = np.array(far_point) - np.array(near_point)
        ray_dir = ray_dir / np.linalg.norm(ray_dir)

        # Ray origin
        ray_origin = np.array(near_point)

        # Check intersection with each cube face
        min_distance = float('inf')
        hit_face = None
        hit_cube = None
        hit_point = None

        for cube_pos, cube in self.cube_states.items():
            for normal, color in cube['faces'].items():
                # Skip internal faces (not visible from outside)
                if self.is_internal_face(cube_pos, normal):
                    continue

                # Calculate face center in world space
                x, y, z = cube['pos']
                face_center = np.array([x * 0.62, y * 0.62, z * 0.62]) + np.array(normal) * 0.3

                # Calculate intersection with the plane of this face
                n_dot_dir = np.dot(normal, ray_dir)

                # Skip if ray is parallel to the plane
                if abs(n_dot_dir) < 1e-6:
                    continue

                # Calculate intersection point
                d = np.dot(normal, face_center)
                t = (d - np.dot(normal, ray_origin)) / n_dot_dir

                # Skip if intersection is behind the ray origin
                if t < 0:
                    continue

                # Calculate intersection point
                intersection = ray_origin + t * ray_dir

                # Check if the intersection is within the face boundaries
                local_center = np.array([x * 0.62, y * 0.62, z * 0.62])
                local_intersection = intersection - local_center

                # Calculate the two axis vectors for this face plane
                if normal[0] != 0:  # X-normal face
                    axis_1 = np.array([0, 1, 0])
                    axis_2 = np.array([0, 0, 1])
                elif normal[1] != 0:  # Y-normal face
                    axis_1 = np.array([1, 0, 0])
                    axis_2 = np.array([0, 0, 1])
                else:  # Z-normal face
                    axis_1 = np.array([1, 0, 0])
                    axis_2 = np.array([0, 1, 0])

                # Project the intersection point onto the face plane
                proj_1 = np.dot(local_intersection, axis_1)
                proj_2 = np.dot(local_intersection, axis_2)

                # Check if the projection is within the bounds of the face
                if abs(proj_1) <= 0.3 and abs(proj_2) <= 0.3:
                    # Calculate distance from ray origin to intersection
                    distance = t

                    # Keep track of the closest intersection
                    if distance < min_distance:
                        min_distance = distance
                        hit_face = normal
                        hit_cube = cube_pos
                        hit_point = intersection

        if hit_face:
            # Calculate exact layer position based on hit point
            precise_layer = self.calculate_precise_layer(hit_face, hit_point, hit_cube)
            return hit_face, precise_layer, hit_point

        return None

    def is_internal_face(self, cube_pos, normal):
        """Check if this face is internal (not visible from outside)"""
        x, y, z = cube_pos
        nx, ny, nz = normal

        # Check if there's another cube in the direction of this normal
        adjacent_pos = (x + nx, y + ny, z + nz)
        return adjacent_pos in self.cube_states

    def calculate_precise_layer(self, hit_face, hit_point, hit_cube):
        """Calculate the precise layer to rotate based on ray hit information"""
        # Convert hit point to layer coordinates
        x, y, z = hit_cube

        # Determine rotation axis based on face normal
        if hit_face[0] != 0:  # X-normal face
            # For X-normal faces, we might rotate around Y or Z
            # Return the existing cube position for now
            return hit_cube
        elif hit_face[1] != 0:  # Y-normal face
            # For Y-normal faces, we might rotate around X or Z
            return hit_cube
        elif hit_face[2] != 0:  # Z-normal face
            # For Z-normal faces, we might rotate around X or Y
            return hit_cube

        return hit_cube

    def is_cursor_inside_cube(self, mouse_pos):
        """Check if cursor is inside the bounds of the Rubik's cube"""
        return self.pick_face(*mouse_pos) is not None

    def rotate_layer_by_drag(self, dx, dy):
        """Rotate a layer based on mouse drag direction with improved precision"""
        if not self.drag_on_face:
            return

        # Unpack the enhanced hit information
        if len(self.drag_on_face) == 3:
            hit_face, hit_cube, hit_point = self.drag_on_face
        else:
            hit_face, hit_cube = self.drag_on_face
            hit_point = None

        # Determine magnitude of drag
        drag_magnitude = math.sqrt(dx * dx + dy * dy)

        # Only process if drag is significant
        if drag_magnitude < self.drag_threshold:
            return

        # Calculate the primary drag direction (horizontal or vertical)
        is_vertical_drag = abs(dy) > abs(dx)

        # Determine rotation axis and direction based on face normal and drag direction
        if hit_face[0] != 0:  # X-normal face (Left/Right)
            if is_vertical_drag:
                axis = 'z'
                index = hit_cube[2]
                # Use consistent direction mapping for intuitive rotation
                direction = 1 if (hit_face[0] > 0 and dy > 0) or (hit_face[0] < 0 and dy < 0) else -1
            else:
                axis = 'y'
                index = hit_cube[1]
                direction = -1 if (hit_face[0] > 0 and dx > 0) or (hit_face[0] < 0 and dx < 0) else 1

        elif hit_face[1] != 0:  # Y-normal face (Top/Bottom)
            if is_vertical_drag:
                axis = 'x'
                index = hit_cube[0]
                direction = -1 if (hit_face[1] > 0 and dy > 0) or (hit_face[1] < 0 and dy < 0) else 1
            else:
                axis = 'z'
                index = hit_cube[2]
                direction = -1 if (hit_face[1] > 0 and dx > 0) or (hit_face[1] < 0 and dx < 0) else 1

        elif hit_face[2] != 0:  # Z-normal face (Front/Back)
            if is_vertical_drag:
                axis = 'x'
                index = hit_cube[0]
                direction = 1 if (hit_face[2] > 0 and dy > 0) or (hit_face[2] < 0 and dy < 0) else -1
            else:
                axis = 'y'
                index = hit_cube[1]
                direction = 1 if (hit_face[2] > 0 and dx > 0) or (hit_face[2] < 0 and dx < 0) else -1

        # Start the rotation with improved layer selection
        self.start_rotation(axis, index, direction)
        self.drag_on_face = False  # Reset drag on face

    def start_rotation(self, axis, index, direction):
        if not self.animating:
            self.animating = True
            self.animation_params = [axis, index, direction, 0]

    def update_animation(self):
        if not self.animating:
            return
        self.animation_params[3] += 6 * self.animation_params[2]
        if abs(self.animation_params[3]) >= 90:
            self.finish_rotation(*self.animation_params[:3])
            self.animating = False
            self.animation_params = None

    def finish_rotation(self, axis, layer_index, direction):
        angle = math.radians(90 * direction)
        cos_a = round(math.cos(angle))
        sin_a = round(math.sin(angle))

        new_states = {}
        for key, cube in self.cube_states.items():
            x, y, z = cube['pos']
            faces = cube['faces']
            if (axis == 'x' and x == layer_index):
                y2, z2 = y * cos_a - z * sin_a, y * sin_a + z * cos_a
                new_faces = {}
                for n, c in faces.items():
                    nx, ny, nz = n
                    ny2, nz2 = ny * cos_a - nz * sin_a, ny * sin_a + nz * cos_a
                    new_faces[(nx, round(ny2), round(nz2))] = c
                new_states[(x, round(y2), round(z2))] = {'pos': [x, round(y2), round(z2)], 'faces': new_faces}
            elif (axis == 'y' and y == layer_index):
                x2, z2 = x * cos_a - z * sin_a, x * sin_a + z * cos_a
                new_faces = {}
                for n, c in faces.items():
                    nx, ny, nz = n
                    nx2, nz2 = nx * cos_a - nz * sin_a, nx * sin_a + nz * cos_a
                    new_faces[(round(nx2), ny, round(nz2))] = c
                new_states[(round(x2), y, round(z2))] = {'pos': [round(x2), y, round(z2)], 'faces': new_faces}
            elif (axis == 'z' and z == layer_index):
                x2, y2 = x * cos_a - y * sin_a, x * sin_a + y * cos_a
                new_faces = {}
                for n, c in faces.items():
                    nx, ny, nz = n
                    nx2, ny2 = nx * cos_a - ny * sin_a, nx * sin_a + ny * cos_a
                    new_faces[(round(nx2), round(ny2), nz)] = c
                new_states[(round(x2), round(y2), z)] = {'pos': [round(x2), round(y2), z], 'faces': new_faces}
            else:
                new_states[tuple(cube['pos'])] = cube

        self.cube_states = new_states

    def handle_event(self, event):
        if event.type == pygame.MOUSEBUTTONDOWN:
            if event.button == 1:
                self.dragging = True
                self.last_mouse_pos = pygame.mouse.get_pos()
                self.start_drag_pos = self.last_mouse_pos

                # Check if mouse is inside the cube using enhanced ray tracing
                hit_result = self.pick_face(*self.last_mouse_pos)
                if hit_result:
                    self.drag_on_face = hit_result
                else:
                    self.drag_on_face = None

        elif event.type == pygame.MOUSEBUTTONUP:
            if event.button == 1:
                self.dragging = False
                self.last_mouse_pos = None
                self.start_drag_pos = None
                self.drag_on_face = None

        elif event.type == pygame.MOUSEMOTION and self.dragging and not self.animating:
            x, y = pygame.mouse.get_pos()
            dx = x - self.last_mouse_pos[0]
            dy = y - self.last_mouse_pos[1]

            # If we're dragging on a face, rotate that layer with improved precision
            if self.drag_on_face:
                self.rotate_layer_by_drag(dx, dy)
            # Otherwise, rotate the entire cube
            else:
                self.angle_x += dy * 0.3
                self.angle_y -= dx * 0.3

            self.last_mouse_pos = (x, y)

    def main_loop(self):
        while True:
            self.update_animation()
            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    quit()
                elif event.type == pygame.MOUSEBUTTONDOWN or event.type == pygame.MOUSEBUTTONUP or event.type == pygame.MOUSEMOTION:
                    self.handle_event(event)

            self.draw_cube()
            pygame.display.flip()
            pygame.time.wait(16)


if __name__ == "__main__":
    cube = RubiksCube3D()
    cube.main_loop()
